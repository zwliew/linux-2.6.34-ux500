/*
 * Copyright (C) ST-Ericsson AB 2009
 *
 * Author: Fredrik Allansson <fredrik.allansson@stericsson.com> for ST-Ericsson
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA
 */

#ifndef B2R2_HW_H__
#define B2R2_HW_H__

/* Scaling works in strips 128 pixels wide */
#define B2R2_RESCALE_MAX_WIDTH 128

/* Rotation works in strips 16 pixels wide */
#define B2R2_ROTATE_MAX_WIDTH 16

/* B2R2 color formats */
#define B2R2_COLOR_FORMAT_SHIFT 16
enum b2r2_native_fmt {
	/* RGB formats */
	B2R2_NATIVE_RGB565 = 0x00 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_RGB888 = 0x01 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_ARGB8565 = 0x04 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_ARGB8888 = 0x05 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_ARGB1555 = 0x06 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_ARGB4444 = 0x07 << B2R2_COLOR_FORMAT_SHIFT,

	/* YCbCr formats */
	B2R2_NATIVE_YCBCR888 = 0x10 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_YCBCR422R = 0x12 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_AYCBCR8888 = 0x15 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_YCBCR42X_MB = 0x14 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_YCBCR42X_R2B = 0x16 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_YCBCR42X_MBN = 0x0e << B2R2_COLOR_FORMAT_SHIFT,

	/* CLUT formats */
	B2R2_NATIVE_CLUT2 = 0x09 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_CLUT8 = 0x0b << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_ACLUT44 = 0x0c << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_ACLUT88 = 0x0d << B2R2_COLOR_FORMAT_SHIFT,

	/* Misc. formats */
	B2R2_NATIVE_A1 = 0x18 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_A8 = 0x19 << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_YUV	= 0x1e << B2R2_COLOR_FORMAT_SHIFT,
	B2R2_NATIVE_BYTE = 0x1f << B2R2_COLOR_FORMAT_SHIFT,
};

/* B2R2_CIC register values */
enum b2r2_cic {
	B2R2_CIC_COLOR_FILL =     0x00000002,
	B2R2_CIC_SOURCE_1 =       0x00000004,
	B2R2_CIC_SOURCE_2 =       0x00000008,
	B2R2_CIC_SOURCE_3 =       0x00000010,
	B2R2_CIC_CLIP_WINDOW =    0x00000020,
	B2R2_CIC_CLUT =           0x00000040,
	B2R2_CIC_FILTER_CONTROL = 0x00000080,
	B2R2_CIC_RESIZE_CHROMA =  0x00000100,
	B2R2_CIC_RESIZE_LUMA =    0x00000200,
	B2R2_CIC_FLICKER_COEFF =  0x00000400,
	B2R2_CIC_COLOR_KEY =      0x00000800,
	B2R2_CIC_XYL =            0x00001000,
	B2R2_CIC_SAU =            0x00002000,
	B2R2_CIC_IVMX =           0x00004000,
	B2R2_CIC_OMVX =           0x00008000,
	B2R2_CIC_PACEDOT =        0x00010000,
	B2R2_CIC_VC1 =            0x00020000,
};

/* B2R2_INS register values */
#define B2R2_INS_SOURCE_1_SHIFT 0
#define B2R2_INS_SOURCE_2_SHIFT 3
#define B2R2_INS_SOURCE_3_SHIFT 5
#define B2R2_INS_IVMX_SHIFT 6
#define B2R2_INS_CLUTOP_SHIFT 7
#define B2R2_INS_RESCALE2D_SHIFT 8
#define B2R2_INS_FLICK_FILT_SHIFT 9
#define B2R2_INS_RECT_CLIP_SHIFT 10
#define B2R2_INS_CKEY_SHIFT 11
#define B2R2_INS_OVMX_SHIFT 12
#define B2R2_INS_DEI_SHIFT 13
#define B2R2_INS_PLANE_MASK_SHIFT 14
#define B2R2_INS_XYL_SHIFT 15
#define B2R2_INS_DOT_SHIFT 16
#define B2R2_INS_VC1R_SHIFT 17
#define B2R2_INS_ROTATION_SHIFT 18
#define B2R2_INS_PACE_DOWN_SHIFT 30
#define B2R2_INS_BLITCOMPIRQ_SHIFT 31
enum b2r2_ins {
	/* Source 1 config */
	B2R2_INS_SOURCE_1_FETCH_FROM_MEM =      0x1 << B2R2_INS_SOURCE_1_SHIFT,
	B2R2_INS_SOURCE_1_COLOR_FILL_REGISTER = 0x3 << B2R2_INS_SOURCE_1_SHIFT,
	B2R2_INS_SOURCE_1_DIRECT_COPY =         0x4 << B2R2_INS_SOURCE_1_SHIFT,
	B2R2_INS_SOURCE_1_DIRECT_FILL =         0x7 << B2R2_INS_SOURCE_1_SHIFT,

	/* Source 2 config */
	B2R2_INS_SOURCE_2_FETCH_FROM_MEM =      0x1 << B2R2_INS_SOURCE_2_SHIFT,
	B2R2_INS_SOURCE_2_COLOR_FILL_REGISTER = 0x3 << B2R2_INS_SOURCE_2_SHIFT,

	/* Source 3 config */
	B2R2_INS_SOURCE_3_FETCH_FROM_MEM =      0x1 << B2R2_INS_SOURCE_3_SHIFT,

	/* Other configs */
	B2R2_INS_IVMX_ENABLED =               0x1 << B2R2_INS_IVMX_SHIFT,
	B2R2_INS_CLUTOP_ENABLED =             0x1 << B2R2_INS_CLUTOP_SHIFT,
	B2R2_INS_RESCALE2D_ENABLED =          0x1 << B2R2_INS_RESCALE2D_SHIFT,
	B2R2_INS_FLICK_FILT_ENABLED =         0x1 << B2R2_INS_FLICK_FILT_SHIFT,
	B2R2_INS_RECT_CLIP_ENABLED =          0x1 << B2R2_INS_RECT_CLIP_SHIFT,
	B2R2_INS_CKEY_ENABLED =               0x1 << B2R2_INS_CKEY_SHIFT,
	B2R2_INS_OVMX_ENABLED =               0x1 << B2R2_INS_OVMX_SHIFT,
	B2R2_INS_DEI_ENABLED =                0x1 << B2R2_INS_DEI_SHIFT,
	B2R2_INS_PLANE_MASK_ENABLED =         0x1 << B2R2_INS_PLANE_MASK_SHIFT,
	B2R2_INS_XYL_ENABLED =                0x1 << B2R2_INS_XYL_SHIFT,
	B2R2_INS_DOT_ENABLED =                0x1 << B2R2_INS_DOT_SHIFT,
	B2R2_INS_VC1R_ENABLED =               0x1 << B2R2_INS_VC1R_SHIFT,
	B2R2_INS_ROTATION_ENABLED =           0x1 << B2R2_INS_ROTATION_SHIFT,
	B2R2_INS_PACE_DOWN_ENABLED =          0x1 << B2R2_INS_PACE_DOWN_SHIFT,
	B2R2_INS_BLITCOMPIRQ_ENABLED =        0x1 << B2R2_INS_BLITCOMPIRQ_SHIFT,

};

/* B2R2_ACK register values */
#define B2R2_ACK_MODE_SHIFT 0
#define B2R2_ACK_SWAP_FG_BG_SHIFT 4
#define B2R2_ACK_GALPHA_ROPID_SHIFT 8
#define B2R2_ACK_CKEY_BLUE_SHIFT 16
#define B2R2_ACK_CKEY_GREEN_SHIFT 18
#define B2R2_ACK_CKEY_RED_SHIFT 20
#define B2R2_ACK_CKEY_SEL_SHIFT 22
enum b2r2_ack {
	/* ALU operation modes */
	B2R2_ACK_MODE_LOGICAL_OPERATION =            0x1 << B2R2_ACK_MODE_SHIFT,
	B2R2_ACK_MODE_BLEND_NOT_PREMULT =            0x2 << B2R2_ACK_MODE_SHIFT,
	B2R2_ACK_MODE_BLEND_PREMULT =                0x3 << B2R2_ACK_MODE_SHIFT,
	B2R2_ACK_MODE_CLIPMASK_LOGICAL_FIRST_PASS =  0x4 << B2R2_ACK_MODE_SHIFT,
	B2R2_ACK_MODE_CLIPMASK_BLEND =               0x5 << B2R2_ACK_MODE_SHIFT,
	B2R2_ACK_MODE_BYPASS_S2_S3 =                 0x7 << B2R2_ACK_MODE_SHIFT,
	B2R2_ACK_MODE_CLIPMASK_LOGICAL_SECOND_PASS = 0x8 << B2R2_ACK_MODE_SHIFT,
	B2R2_ACK_MODE_CLIPMASK_XYL_LOGICAL =         0x9 << B2R2_ACK_MODE_SHIFT,
	B2R2_ACK_MODE_CLIPMASK_XYL_BLEND_NOT_PREMULT=0xa << B2R2_ACK_MODE_SHIFT,
	B2R2_ACK_MODE_CLIPMASK_XYL_BLEND_PREMULT =   0xb << B2R2_ACK_MODE_SHIFT,

	/* ALU channel selection */
	B2R2_ACK_SWAP_FG_BG =                  0x1 << B2R2_ACK_SWAP_FG_BG_SHIFT,

	/* Global alpha and ROP IDs */
	B2R2_ACK_ROP_CLEAR =                 0x0 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_AND =                   0x1 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_AND_REV =               0x2 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_COPY =                  0x3 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_AND_INV =               0x4 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_NOOP =                  0x5 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_XOR =                   0x6 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_OR =                    0x7 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_NOR =                   0x8 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_EQUIV =                 0x9 << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_INVERT =                0xa << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_OR_REV =                0xb << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_COPY_INV =              0xc << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_OR_INV =                0xd << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_NAND =                  0xe << B2R2_ACK_GALPHA_ROPID_SHIFT,
	B2R2_ACK_ROP_SET =                   0xf << B2R2_ACK_GALPHA_ROPID_SHIFT,

	/* Color key configuration bits */
	B2R2_ACK_CKEY_BLUE_MATCH_IF_BETWEEN =  0x1 << B2R2_ACK_CKEY_BLUE_SHIFT,
	B2R2_ACK_CKEY_BLUE_MATCH_IF_LT_OR_GT = 0x2 << B2R2_ACK_CKEY_BLUE_SHIFT,
	B2R2_ACK_CKEY_RED_MATCH_IF_BETWEEN =   0x1 << B2R2_ACK_CKEY_GREEN_SHIFT,
	B2R2_ACK_CKEY_RED_MATCH_IF_LT_OR_GT =  0x2 << B2R2_ACK_CKEY_GREEN_SHIFT,
	B2R2_ACK_CKEY_GREEN_MATCH_IF_BETWEEN = 0x1 << B2R2_ACK_CKEY_RED_SHIFT,
	B2R2_ACK_CKEY_GREEN_MATCH_IF_LT_OR_GT= 0x2 << B2R2_ACK_CKEY_RED_SHIFT,

	/* Color key input selection */
	B2R2_ACK_CKEY_SEL_DEST =               0x0 << B2R2_ACK_CKEY_SEL_SHIFT,
	B2R2_ACK_CKEY_SEL_SRC_BEFORE_CLUT =    0x1 << B2R2_ACK_CKEY_SEL_SHIFT,
	B2R2_ACK_CKEY_SEL_SRC_AFTER_CLUT =     0x2 << B2R2_ACK_CKEY_SEL_SHIFT,
	B2R2_ACK_CKEY_SEL_BLANKING_S2_ALPHA =  0x3 << B2R2_ACK_CKEY_SEL_SHIFT,
};

/* Common <S/T>TY defines */
#define B2R2_TY_BITMAP_PITCH_SHIFT 0
#define B2R2_TY_COLOR_FORM_SHIFT 16
#define B2R2_TY_ALPHA_RANGE_SHIFT 21
#define B2R2_TY_MB_ACCESS_MODE_SHIFT 23
#define B2R2_TY_HSO_SHIFT 24
#define B2R2_TY_VSO_SHIFT 25
#define B2R2_TY_SUBBYTE_SHIFT 28
#define B2R2_TY_ENDIAN_SHIFT 30
#define B2R2_TY_SECURE_SHIFT 31

/* Dummy enum for generalization of <S/T>TY registers */
enum b2r2_ty {
	/* Alpha range */
	B2R2_TY_ALPHA_RANGE_128 = 0x0 << B2R2_TY_ALPHA_RANGE_SHIFT,
	B2R2_TY_ALPHA_RANGE_255 = 0x1 << B2R2_TY_ALPHA_RANGE_SHIFT,

	/* Access mode in macro-block organized frame buffers */
	B2R2_TY_MB_ACCESS_MODE_FRAME = 0x0 << B2R2_TY_MB_ACCESS_MODE_SHIFT,
	B2R2_TY_MB_ACCESS_MODE_FIELD = 0x1 << B2R2_TY_MB_ACCESS_MODE_SHIFT,

	/* Horizontal scan order */
	B2R2_TY_HSO_LEFT_TO_RIGHT = 0x0 << B2R2_TY_HSO_SHIFT,
	B2R2_TY_HSO_RIGHT_TO_LEFT = 0x1 << B2R2_TY_HSO_SHIFT,

	/* Vertical scan order */
	B2R2_TY_VSO_TOP_TO_BOTTOM = 0x0 << B2R2_TY_VSO_SHIFT,
	B2R2_TY_VSO_BOTTOM_TO_TOP = 0x1 << B2R2_TY_VSO_SHIFT,

	/* Pixel ordering for sub-byte formats (position of right-most pixel) */
	B2R2_TY_SUBBYTE_MSB = 0x0 << B2R2_TY_SUBBYTE_SHIFT,
	B2R2_TY_SUBBYTE_LSB = 0x1 << B2R2_TY_SUBBYTE_SHIFT,

	/* Bitmap endianess */
	B2R2_TY_ENDIAN_BIG_NOT_LITTLE = 0x1 << B2R2_TY_ENDIAN_SHIFT,

	/* Secureness of the target memory region */
	B2R2_TY_SECURE_UNSECURE = 0x0 << B2R2_TY_SECURE_SHIFT,
	B2R2_TY_SECURE_SECURE =   0x1 << B2R2_TY_SECURE_SHIFT,

	/* Dummy to make sure the data type is large enough */
	B2R2_TY_DUMMY = 0xffffffff,
};

/* B2R2_TTY register values */
#define B2R2_TTY_CB_NOT_CR_SHIFT 22
#define B2R2_TTY_RGB_ROUND_SHIFT 26
#define B2R2_TTY_CHROMA_NOT_LUMA_SHIFT 27
enum b2r2_tty {

	/* Chroma component selection */
	B2R2_TTY_CB_NOT_CR = 0x1 << B2R2_TTY_CB_NOT_CR_SHIFT,

	/* RGB rounding mode */
	B2R2_TTY_RGB_ROUND_NORMAL = 0x0 << B2R2_TTY_RGB_ROUND_SHIFT,
	B2R2_TTY_RGB_ROUND_DITHER = 0x1 << B2R2_TTY_RGB_ROUND_SHIFT,

	/* Component selection for splitted frame buffer formats */
	B2R2_TTY_CHROMA_NOT_LUMA = 0x1 << B2R2_TTY_CHROMA_NOT_LUMA_SHIFT,
};

/* B2R2_S1TY register values */
#define B2R2_S1TY_A1_SUBST_SHIFT 22
#define B2R2_S1TY_ROTATION_SHIFT 27
#define B2R2_S1TY_RGB_EXPANSION_SHIFT 29
enum b2r2_s1ty {

	/* Alpha bit substitution mode for ARGB1555 */
	B2R2_S1TY_A1_SUBST_KEY_MODE = 0x1 << B2R2_S1TY_A1_SUBST_SHIFT,

	/* Input rectangle rotation (NOT YET IMPLEMENTED) */
	B2R2_S1TY_ENABLE_ROTATION = 0x1 << B2R2_S1TY_ROTATION_SHIFT,

	/* RGB expansion mode */
	B2R2_S1TY_RGB_EXPANSION_MSB_DUP = 0x0  << B2R2_S1TY_RGB_EXPANSION_SHIFT,
	B2R2_S1TY_RGB_EXPANSION_LSP_ZERO = 0x1 << B2R2_S1TY_RGB_EXPANSION_SHIFT,
};

/* B2R2_S1TY register values */
#define B2R2_S2TY_A1_SUBST_SHIFT 22
#define B2R2_S2TY_CHROMA_LEFT_SHIFT 26
#define B2R2_S2TY_RGB_EXPANSION_SHIFT 29
enum b2r2_s2ty {

	/* Alpha bit substitution mode for ARGB1555 */
	B2R2_S2TY_A1_SUBST_KEY_MODE = 0x1 << B2R2_S2TY_A1_SUBST_SHIFT,

	/* Chroma left extension */
	B2R2_S2TY_CHROMA_LEFT_EXT_FOLLOWING_PIXEL = 0x0
						<< B2R2_S2TY_CHROMA_LEFT_SHIFT,
	B2R2_S2TY_CHROMA_LEFT_EXT_AVERAGE = 0x1 << B2R2_S2TY_CHROMA_LEFT_SHIFT,

	/* RGB expansion mode */
	B2R2_S2TY_RGB_EXPANSION_MSB_DUP = 0x0  << B2R2_S2TY_RGB_EXPANSION_SHIFT,
	B2R2_S2TY_RGB_EXPANSION_LSP_ZERO = 0x1 << B2R2_S2TY_RGB_EXPANSION_SHIFT,
};

/* B2R2_S1TY register values */
#define B2R2_S3TY_BLANK_ACC_SHIFT 26
enum b2r2_s3ty {
	/* Enables "blank" access on this source (nothing will be fetched from
	   memory) */
	B2R2_S3TY_ENABLE_BLANK_ACCESS = 0x1 << B2R2_S3TY_BLANK_ACC_SHIFT,
};

/* B2R2_<S or T>XY register values */
#define B2R2_XY_X_SHIFT 0
#define B2R2_XY_Y_SHIFT 16

/* B2R2_<S or T>SZ register values */
#define B2R2_SZ_WIDTH_SHIFT 0
#define B2R2_SZ_HEIGHT_SHIFT 16

/* Clip window offset (top left coordinates) */
#define B2R2_CWO_X_SHIFT 0
#define B2R2_CWO_Y_SHIFT 16

/* Clip window stop (bottom right coordinates) */
#define B2R2_CWS_X_SHIFT 0
#define B2R2_CWS_Y_SHIFT 16

/* Filter control (2D resize control) */
enum b2r2_fctl {
	/* Horizontal 2D filter mode */
	B2R2_FCTL_HF2D_MODE_ENABLE_COLOR_CHANNEL_FILTER = (1 << 0),
	B2R2_FCTL_HF2D_MODE_ENABLE_ALPHA_CHANNEL_FILTER = (1 << 1),
	B2R2_FCTL_HF2D_MODE_ENABLE_RESIZER = (1 << 2),

	/* Vertical 2D filter mode */
	B2R2_FCTL_VF2D_MODE_ENABLE_COLOR_CHANNEL_FILTER = (1 << 4),
	B2R2_FCTL_VF2D_MODE_ENABLE_ALPHA_CHANNEL_FILTER = (1 << 5),
	B2R2_FCTL_VF2D_MODE_ENABLE_RESIZER = (1 << 6),

	/* Alpha borders */
	B2R2_FCTL_ENABLE_ALPHA_BORDER_RIGHT = (1 << 12),
	B2R2_FCTL_ENABLE_ALPHA_BORDER_LEFT = (1 << 13),
	B2R2_FCTL_ENABLE_ALPHA_BORDER_BOTTOM = (1 << 14),
	B2R2_FCTL_ENABLE_ALPHA_BORDER_TOP = (1 << 15),

	/* Luma path horizontal 2D filter mode */
	B2R2_FCTL_LUMA_HF2D_MODE_ENABLE_FILTER = (1 << 24),
	B2R2_FCTL_LUMA_HF2D_MODE_ENABLE_RESIZER = (1 << 25),

	/* Luma path vertical 2D filter mode */
	B2R2_FCTL_LUMA_VF2D_MODE_ENABLE_FILTER = (1 << 28),
	B2R2_FCTL_LUMA_VF2D_MODE_ENABLE_RESIZER = (1 << 29),
};

/* Resize scaling factor */
#define B2R2_RSF_HSRC_INC_SHIFT 0
#define B2R2_RSF_VSRC_INC_SHIFT 16

/* Resizer initialization */
#define B2R2_RZI_HSRC_INIT_SHIFT 0
#define B2R2_RZI_HNB_REPEAT_SHIFT 12
#define B2R2_RZI_VSRC_INIT_SHIFT 16
#define B2R2_RZI_VNB_REPEAT_SHIFT 28

/* Default values for the resizer */
#define B2R2_RZI_DEFAULT_HNB_REPEAT (3 << B2R2_RZI_HNB_REPEAT_SHIFT)
#define B2R2_RZI_DEFAULT_VNB_REPEAT (3 << B2R2_RZI_VNB_REPEAT_SHIFT)

/*  VMX register values for RGB to YUV color conversion */
/*  Magic numbers from 27.11 in DB8500_DesignSpecification_v2.5.pdf */

/* 601 Video Matrix (standard 601 conversion) */
#define B2R2_VMX0_RGB_TO_YUV_601_VIDEO 0x107e4beb
#define B2R2_VMX1_RGB_TO_YUV_601_VIDEO 0x0982581d
#define B2R2_VMX2_RGB_TO_YUV_601_VIDEO 0xfa9ea483
#define B2R2_VMX3_RGB_TO_YUV_601_VIDEO 0x08000080

/* 601 Gfx Matrix (full range conversion) */
#define B2R2_VMX0_RGB_TO_YUV_601_GFX 0x0e1e8bee
#define B2R2_VMX1_RGB_TO_YUV_601_GFX 0x08420419
#define B2R2_VMX2_RGB_TO_YUV_601_GFX 0xfb5ed471
#define B2R2_VMX3_RGB_TO_YUV_601_GFX 0x08004080

/* 709 Video Matrix (standard 709 conversion) */
#define B2R2_VMX0_RGB_TO_YUV_709_VIDEO 0x107e27f4
#define B2R2_VMX1_RGB_TO_YUV_709_VIDEO 0x06e2dc13
#define B2R2_VMX2_RGB_TO_YUV_709_VIDEO 0xfc5e6c83
#define B2R2_VMX3_RGB_TO_YUV_709_VIDEO 0x08000080

/* 709 Gfx Matrix (standard 709 conversion) */
#define B2R2_VMX0_RGB_TO_YUV_709_GFX 0x0e3e6bf5
#define B2R2_VMX1_RGB_TO_YUV_709_GFX 0x05e27410
#define B2R2_VMX2_RGB_TO_YUV_709_GFX 0xfcdea471
#define B2R2_VMX3_RGB_TO_YUV_709_GFX 0x08004080

/* VMX register values for YUV to RGB color conversion */

/* 601 Video Matrix (standard 601 conversion) */
#define B2R2_VMX0_YUV_TO_RGB_601_VIDEO 0x2c440000
#define B2R2_VMX1_YUV_TO_RGB_601_VIDEO 0xe9a403aa
#define B2R2_VMX2_YUV_TO_RGB_601_VIDEO 0x0004013f
#define B2R2_VMX3_YUV_TO_RGB_601_VIDEO 0x34f21322

/* 601 Gfx Matrix (full range conversion) */
#define B2R2_VMX0_YUV_TO_RGB_601_GFX 0x3324a800
#define B2R2_VMX1_YUV_TO_RGB_601_GFX 0xe604ab9c
#define B2R2_VMX2_YUV_TO_RGB_601_GFX 0x0004a957
#define B2R2_VMX3_YUV_TO_RGB_601_GFX 0x32121eeb

/* 709 Video Matrix (standard 709 conversion) */
#define B2R2_VMX0_YUV_TO_RGB_709_VIDEO 0x31440000
#define B2R2_VMX1_YUV_TO_RGB_709_VIDEO 0xf16403d1
#define B2R2_VMX2_YUV_TO_RGB_709_VIDEO 0x00040145
#define B2R2_VMX3_YUV_TO_RGB_709_VIDEO 0x33b14b18

/* 709 Gfx Matrix (standard 709 conversion) */
#define B2R2_VMX0_YUV_TO_RGB_709_GFX 0x3964a800
#define B2R2_VMX1_YUV_TO_RGB_709_GFX 0xef04abc9
#define B2R2_VMX2_YUV_TO_RGB_709_GFX 0x0004a95f
#define B2R2_VMX3_YUV_TO_RGB_709_GFX 0x307132df

/* VMX register values for RGB to BGR conversion */
#define B2R2_VMX0_RGB_TO_BGR 0x00000100
#define B2R2_VMX1_RGB_TO_BGR 0x00040000
#define B2R2_VMX2_RGB_TO_BGR 0x20000000
#define B2R2_VMX3_RGB_TO_BGR 0x00000000

/*  VMX register values for BGR to YUV color conversion */
/*  Note: All YUV <--> BGR values are calculated by taking the values above and
          multiplying them with the inverted unity matrix */

/* 601 Video Matrix (standard 601 conversion) */
#define B2R2_VMX0_BGR_TO_YUV_601_VIDEO 0xfd7e4883
#define B2R2_VMX1_BGR_TO_YUV_601_VIDEO 0x03220442
#define B2R2_VMX2_BGR_TO_YUV_601_VIDEO 0x107ea7d4
#define B2R2_VMX3_BGR_TO_YUV_601_VIDEO 0x08000080

/* 601 Gfx Matrix (full range conversion) */
#define B2R2_VMX0_BGR_TO_YUV_601_GFX 0xFDDE8870
#define B2R2_VMX1_BGR_TO_YUV_601_GFX 0x08420419
#define B2R2_VMX2_BGR_TO_YUV_601_GFX 0xFA9EA483
#define B2R2_VMX3_BGR_TO_YUV_601_GFX 0x08004080

/* 709 Video Matrix (standard 709 conversion) */
#define B2R2_VMX0_BGR_TO_YUV_709_VIDEO 0xFE9E2483
#define B2R2_VMX1_BGR_TO_YUV_709_VIDEO 0x0262DC37
#define B2R2_VMX2_BGR_TO_YUV_709_VIDEO 0x107E6FE2
#define B2R2_VMX3_BGR_TO_YUV_709_VIDEO 0x08000080

/* 709 Gfx Matrix (standard 709 conversion) */
#define B2R2_VMX0_BGR_TO_YUV_709_GFX 0xFEBE6871
#define B2R2_VMX1_BGR_TO_YUV_709_GFX 0x0202742F
#define B2R2_VMX2_BGR_TO_YUV_709_GFX 0x0E3EA7E6
#define B2R2_VMX3_BGR_TO_YUV_709_GFX 0x08004080


/* VMX register values for YUV to BGR conversion */

/* 601 Video Matrix (standard 601 conversion) */
#define B2R2_VMX0_YUV_TO_BGR_601_VIDEO 0x00040162
#define B2R2_VMX1_YUV_TO_BGR_601_VIDEO 0xF544034D
#define B2R2_VMX2_YUV_TO_BGR_601_VIDEO 0x27E40000
#define B2R2_VMX3_YUV_TO_BGR_601_VIDEO 0x34f21322

/* 601 Gfx Matrix (full range conversion) */
#define B2R2_VMX0_YUV_TO_BGR_601_GFX 0x0004A999
#define B2R2_VMX1_YUV_TO_BGR_601_GFX 0xF384AB30
#define B2R2_VMX2_YUV_TO_BGR_601_GFX 0x2AE4A800
#define B2R2_VMX3_YUV_TO_BGR_601_GFX 0x32121eeb

/* 709 Video Matrix (standard 709 conversion) */
#define B2R2_VMX0_YUV_TO_BGR_709_VIDEO 0x0004038A
#define B2R2_VMX1_YUV_TO_BGR_709_VIDEO 0xFA24038B
#define B2R2_VMX2_YUV_TO_BGR_709_VIDEO 0x28A40000
#define B2R2_VMX3_YUV_TO_BGR_709_VIDEO 0x33b14b18

/* 709 Gfx Matrix (standard 709 conversion) */
#define B2R2_VMX0_YUV_TO_BGR_709_GFX 0x0004ABCB
#define B2R2_VMX1_YUV_TO_BGR_709_GFX 0xF924AB78
#define B2R2_VMX2_YUV_TO_BGR_709_GFX 0x2BE4A800
#define B2R2_VMX3_YUV_TO_BGR_709_GFX 0x307132df

#endif /* B2R2_HW_H__ */
